#!/bin/sh

# Exit if the script is not triggered by adding a device
#[ "$ACTION" = add ] || exit

# Iterate over all network interfaces
for NIC in $(ls /sys/class/net/)
do
  # Check if ethtool command is supported for the interface
  if command -v ethtool &> /dev/null && ethtool $NIC &> /dev/null; then
    # Get the maximum RX and TX buffer sizes
    RX_MAX=$(ethtool -g $NIC 2>/dev/null | awk '/^RX:/ {print $2}' | awk 'NR==1')
    TX_MAX=$(ethtool -g $NIC 2>/dev/null | awk '/^TX:/ {print $2}' | awk 'NR==1')

    # Skip the network card if unable to retrieve max RX and TX buffer sizes
    if [ -z "$RX_MAX" ] || [ -z "$TX_MAX" ]; then
      continue
    fi

    # Set RX and TX buffers to maximum supported by the driver
    echo "Setting RX buffer size to $RX_MAX on $NIC"
    ethtool -G $NIC rx $RX_MAX
    echo "Setting TX buffer size to $TX_MAX on $NIC"
    ethtool -G $NIC tx $TX_MAX

    # Initialize flags to check if adaptive coalescing was enabled for RX and TX
    adaptive_rx_supported=false
    adaptive_tx_supported=false

    # Check and enable adaptive RX coalescing if supported
    if ethtool -c $NIC | grep "Adaptive RX:" > /dev/null; then
      adaptive_rx_supported=true
    fi

    # Check and enable adaptive TX coalescing if supported
    if ethtool -c $NIC | grep "TX: off" > /dev/null; then
      adaptive_tx_supported=true
    fi

    # If both adaptive RX and TX coalescing are supported, enable them
    if [ "$adaptive_rx_supported" = true ] && [ "$adaptive_tx_supported" = true ]; then
      if ethtool -C $NIC adaptive-rx on adaptive-tx on &> /dev/null; then
        echo "Adaptive RX/TX coalescing enabled on $NIC"
      else
        echo "Failed to set adaptive RX/TX coalescing on $NIC."
        adaptive_rx_supported=false
        adaptive_tx_supported=false
      fi
    fi
  fi
done
