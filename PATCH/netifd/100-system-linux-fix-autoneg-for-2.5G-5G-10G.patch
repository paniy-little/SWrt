From b0c3334e1de0d3b120f9a7402130cef64d7f954d Mon Sep 17 00:00:00 2001
From: crwnet <crwbak@gmail.com>
Date: Sat, 25 Mar 2023 13:44:53 +0800
Subject: [PATCH] system-linux: fix autoneg for 2.5G/5G/10G

ETHTOOL_GSET / ETHTOOL_SSET API is deprecated, migrate to ETHTOOL_GLINKSETTINGS / ETHTOOL_SLINKSETTINGS API to handle auto-negotiation for higher bandwidth like 2.5G, 5G, 10G
---
 system-linux.c | 80 +++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 79 insertions(+), 1 deletion(-)

diff --git a/system-linux.c b/system-linux.c
index e4041fb..94b3440 100644
--- a/system-linux.c
+++ b/system-linux.c
@@ -1691,9 +1691,86 @@ int system_vlandev_del(struct device *vlandev)
 	return system_link_del(vlandev->ifname);
 }
 
+static inline int ethtool_link_mode_test_bit(unsigned int nr, const __u32 *mask)
+{
+	return !!(mask[nr / 32] & (1 << (nr % 32)));
+}
+static inline int ethtool_link_mode_set_bit(unsigned int nr, __u32 *mask)
+{
+	mask[nr / 32] |= (1 << (nr % 32));
+	return 0;
+}
+
+static int
+system_set_ethtool_settings_future(struct device *dev, struct device_settings *s)
+{
+	struct {
+		struct ethtool_link_settings req;
+		__u32 link_mode_data[3 * 127];
+	} ecmd;
+	struct ifreq ifr = {
+		.ifr_data = (caddr_t)&ecmd,
+	};
+
+	memset(&ecmd, 0, sizeof(ecmd));
+	ecmd.req.cmd = ETHTOOL_GLINKSETTINGS;
+	strncpy(ifr.ifr_name, dev->ifname, sizeof(ifr.ifr_name) - 1);
+
+	if (ioctl(sock_ioctl, SIOCETHTOOL, &ifr) < 0)
+		return 1;
+
+	if (ecmd.req.link_mode_masks_nwords >= 0 || ecmd.req.cmd != ETHTOOL_GLINKSETTINGS)
+        return 2;
+
+	ecmd.req.cmd = ETHTOOL_GLINKSETTINGS;
+	ecmd.req.link_mode_masks_nwords = -ecmd.req.link_mode_masks_nwords;
+
+	if (ioctl(sock_ioctl, SIOCETHTOOL, &ifr) < 0)
+		return 3;
+
+	if (ecmd.req.link_mode_masks_nwords <= 0 || ecmd.req.cmd != ETHTOOL_GLINKSETTINGS)
+		return 4;
+
+	__s8 nwords = ecmd.req.link_mode_masks_nwords;
+	__u32* supported = &ecmd.link_mode_data[0];
+	__u32* advertising = &ecmd.link_mode_data[nwords];
+	memset(advertising, 0, sizeof(__u32) * nwords);
+
+	static const struct {
+		uint8_t bit;
+	} speed_mask[] = {
+		{ ETHTOOL_LINK_MODE_10baseT_Half_BIT },
+		{ ETHTOOL_LINK_MODE_10baseT_Full_BIT },
+		{ ETHTOOL_LINK_MODE_100baseT_Half_BIT },
+		{ ETHTOOL_LINK_MODE_100baseT_Full_BIT },
+		{ ETHTOOL_LINK_MODE_1000baseT_Half_BIT },
+		{ ETHTOOL_LINK_MODE_1000baseT_Full_BIT },
+		{ ETHTOOL_LINK_MODE_2500baseT_Full_BIT },
+		{ ETHTOOL_LINK_MODE_5000baseT_Full_BIT },
+		{ ETHTOOL_LINK_MODE_10000baseT_Full_BIT },
+	};
+	size_t i;
+	uint8_t bit;
+
+	for (i = 0; i < ARRAY_SIZE(speed_mask); i++) {
+		bit = speed_mask[i].bit;
+		if (ethtool_link_mode_test_bit(bit, supported) == 1)
+			ethtool_link_mode_set_bit(bit, advertising);
+	}
+
+	ecmd.req.cmd = ETHTOOL_SLINKSETTINGS;
+	ecmd.req.autoneg = 1;
+
+	return ioctl(sock_ioctl, SIOCETHTOOL, &ifr);
+}
+
 static void
 system_set_ethtool_settings(struct device *dev, struct device_settings *s)
 {
+	int future_result = system_set_ethtool_settings_future(dev, s);
+	if (future_result == 0)
+		return;
+
 	struct ethtool_cmd ecmd = {
 		.cmd = ETHTOOL_GSET,
 	};
@@ -1708,6 +1785,7 @@ system_set_ethtool_settings(struct device *dev, struct device_settings *s)
 		{ 10, ETHTOOL_LINK_MODE_10baseT_Half_BIT, ETHTOOL_LINK_MODE_10baseT_Full_BIT },
 		{ 100, ETHTOOL_LINK_MODE_100baseT_Half_BIT, ETHTOOL_LINK_MODE_100baseT_Full_BIT },
 		{ 1000, ETHTOOL_LINK_MODE_1000baseT_Half_BIT, ETHTOOL_LINK_MODE_1000baseT_Full_BIT },
+		{ 10000, ETHTOOL_LINK_MODE_10000baseT_Full_BIT, ETHTOOL_LINK_MODE_10000baseT_Full_BIT },
 	};
 	uint32_t adv;
 	size_t i;
@@ -1720,7 +1798,7 @@ system_set_ethtool_settings(struct device *dev, struct device_settings *s)
 	adv = ecmd.supported;
 	for (i = 0; i < ARRAY_SIZE(speed_mask); i++) {
 		if (s->flags & DEV_OPT_DUPLEX) {
-			int bit = s->duplex ? speed_mask[i].bit_half : speed_mask[i].bit_full;
+			uint8_t bit = s->duplex ? speed_mask[i].bit_half : speed_mask[i].bit_full;
 			adv &= ~(1 << bit);
 		}
 
