--- a/drivers/char/lrng/lrng_interface_random_kernel.c
+++ b/drivers/char/lrng/lrng_interface_random_kernel.c
@@ -7,21 +7,24 @@
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
+#include <linux/genhd.h>
 #include <linux/blkdev.h>
 #include <linux/hw_random.h>
 #include <linux/kthread.h>
 #include <linux/lrng.h>
 #include <linux/random.h>
 
+#define CREATE_TRACE_POINTS
+#include <trace/events/random.h>
+
 #include "lrng_es_aux.h"
 #include "lrng_es_irq.h"
 #include "lrng_es_mgr.h"
 #include "lrng_interface_dev_common.h"
 #include "lrng_interface_random_kernel.h"
 
-static RAW_NOTIFIER_HEAD(lrng_ready_chain);
-static DEFINE_SPINLOCK(lrng_ready_chain_lock);
-static unsigned int lrng_ready_chain_used = 0;
+static LIST_HEAD(lrng_ready_list);
+static DEFINE_SPINLOCK(lrng_ready_list_lock);
 
 /********************************** Helper ***********************************/
 
@@ -30,9 +33,9 @@ int __init rand_initialize(void)
 	return lrng_rand_initialize();
 }
 
-bool lrng_ready_chain_has_sleeper(void)
+bool lrng_ready_list_has_sleeper(void)
 {
-	return !!lrng_ready_chain_used;
+	return list_empty(&lrng_ready_list);
 }
 
 /*
@@ -48,13 +51,20 @@ bool lrng_ready_chain_has_sleeper(void)
 void lrng_process_ready_list(void)
 {
 	unsigned long flags;
+	struct random_ready_callback *rdy, *tmp;
 
 	if (!lrng_state_operational())
 		return;
 
-	spin_lock_irqsave(&lrng_ready_chain_lock, flags);
-	raw_notifier_call_chain(&lrng_ready_chain, 0, NULL);
-	spin_unlock_irqrestore(&lrng_ready_chain_lock, flags);
+	spin_lock_irqsave(&lrng_ready_list_lock, flags);
+	list_for_each_entry_safe(rdy, tmp, &lrng_ready_list, list) {
+		struct module *owner = rdy->owner;
+
+		list_del_init(&rdy->list);
+		rdy->func(rdy);
+		module_put(owner);
+	}
+	spin_unlock_irqrestore(&lrng_ready_list_lock, flags);
 }
 
 /************************ LRNG kernel input interfaces ************************/
@@ -71,7 +81,7 @@ void lrng_process_ready_list(void)
  * @count: length of buffer
  * @entropy_bits: amount of entropy in buffer (value is in bits)
  */
-void add_hwgenerator_randomness(const void *buffer, size_t count,
+void add_hwgenerator_randomness(const char *buffer, size_t count,
 				size_t entropy_bits)
 {
 	/*
@@ -99,7 +109,7 @@ EXPORT_SYMBOL_GPL(add_hwgenerator_random
  *	 insert into entropy pool.
  * @size: length of buffer
  */
-void add_bootloader_randomness(const void *buf, size_t size)
+void add_bootloader_randomness(const void *buf, unsigned int size)
 {
 	lrng_pool_insert_aux(buf, size,
 			     IS_ENABLED(CONFIG_RANDOM_TRUST_BOOTLOADER) ?
@@ -137,7 +147,7 @@ EXPORT_SYMBOL_GPL(add_input_randomness);
  *	 insert into entropy pool.
  * @size: length of buffer
  */
-void add_device_randomness(const void *buf, size_t size)
+void add_device_randomness(const void *buf, unsigned int size)
 {
 	lrng_pool_insert_aux((u8 *)buf, size, 0);
 }
@@ -150,7 +160,7 @@ EXPORT_SYMBOL(add_disk_randomness);
 #endif
 
 #ifndef CONFIG_LRNG_IRQ
-void add_interrupt_randomness(int irq) { }
+void add_interrupt_randomness(int irq, int irq_flg) { }
 EXPORT_SYMBOL(add_interrupt_randomness);
 #endif
 
@@ -158,85 +168,65 @@ EXPORT_SYMBOL(add_interrupt_randomness);
  * unregister_random_ready_notifier() - Delete a previously registered readiness
  * callback function.
  *
- * @nb: callback definition that was registered initially
+ * @rdy: callback definition that was registered initially
  */
-int unregister_random_ready_notifier(struct notifier_block *nb)
+void del_random_ready_callback(struct random_ready_callback *rdy)
 {
 	unsigned long flags;
-	int ret;
-
-	spin_lock_irqsave(&lrng_ready_chain_lock, flags);
-	ret = raw_notifier_chain_unregister(&lrng_ready_chain, nb);
-	spin_unlock_irqrestore(&lrng_ready_chain_lock, flags);
+	struct module *owner = NULL;
 
-	if (!ret && lrng_ready_chain_used)
-		lrng_ready_chain_used--;
+	spin_lock_irqsave(&lrng_ready_list_lock, flags);
+	if (!list_empty(&rdy->list)) {
+		list_del_init(&rdy->list);
+		owner = rdy->owner;
+	}
+	spin_unlock_irqrestore(&lrng_ready_list_lock, flags);
 
-	return ret;
+	module_put(owner);
 }
-EXPORT_SYMBOL(unregister_random_ready_notifier);
+EXPORT_SYMBOL(del_random_ready_callback);
 
 /*
- * register_random_ready_notifier() - Add a callback function that will be
+ * add_random_ready_callback() - Add a callback function that will be
  * invoked when the DRNG is fully initialized and seeded.
  *
- * @nb: callback definition to be invoked when the LRNG is seeded
+ * @rdy: callback definition to be invoked when the LRNG is seeded
  *
  * Return:
  * * 0 if callback is successfully added
  * * -EALREADY if pool is already initialised (callback not called)
+ * * -ENOENT if module for callback is not alive
  */
-int register_random_ready_notifier(struct notifier_block *nb)
+int add_random_ready_callback(struct random_ready_callback *rdy)
 {
+	struct module *owner;
 	unsigned long flags;
 	int err = -EALREADY;
 
 	if (likely(lrng_state_operational()))
 		return err;
 
-	spin_lock_irqsave(&lrng_ready_chain_lock, flags);
-	if (!lrng_state_operational())
-		err = raw_notifier_chain_register(&lrng_ready_chain, nb);
-	spin_unlock_irqrestore(&lrng_ready_chain_lock, flags);
+	owner = rdy->owner;
+	if (!try_module_get(owner))
+		return -ENOENT;
 
-	if (!err)
-		lrng_ready_chain_used++;
+	spin_lock_irqsave(&lrng_ready_list_lock, flags);
+	if (lrng_state_operational())
+		goto out;
 
-	return err;
-}
-EXPORT_SYMBOL(register_random_ready_notifier);
+	owner = NULL;
 
-#if IS_ENABLED(CONFIG_VMGENID)
-static BLOCKING_NOTIFIER_HEAD(lrng_vmfork_chain);
+	list_add(&rdy->list, &lrng_ready_list);
+	err = 0;
 
-/*
- * Handle a new unique VM ID, which is unique, not secret, so we
- * don't credit it, but we do immediately force a reseed after so
- * that it's used by the crng posthaste.
- */
-void add_vmfork_randomness(const void *unique_vm_id, size_t size)
-{
-	add_device_randomness(unique_vm_id, size);
-	if (lrng_state_operational())
-		lrng_drng_force_reseed();
-	blocking_notifier_call_chain(&lrng_vmfork_chain, 0, NULL);
-}
-#if IS_MODULE(CONFIG_VMGENID)
-EXPORT_SYMBOL_GPL(add_vmfork_randomness);
-#endif
+out:
+	spin_unlock_irqrestore(&lrng_ready_list_lock, flags);
 
-int register_random_vmfork_notifier(struct notifier_block *nb)
-{
-	return blocking_notifier_chain_register(&lrng_vmfork_chain, nb);
-}
-EXPORT_SYMBOL_GPL(register_random_vmfork_notifier);
+	module_put(owner);
 
-int unregister_random_vmfork_notifier(struct notifier_block *nb)
-{
-	return blocking_notifier_chain_unregister(&lrng_vmfork_chain, nb);
+	return err;
 }
-EXPORT_SYMBOL_GPL(unregister_random_vmfork_notifier);
-#endif
+EXPORT_SYMBOL(add_random_ready_callback);
 
 /*********************** LRNG kernel output interfaces ************************/
 
@@ -250,7 +240,7 @@ EXPORT_SYMBOL_GPL(unregister_random_vmfo
  * @buf: buffer to store the random bytes
  * @nbytes: size of the buffer
  */
-void get_random_bytes(void *buf, size_t nbytes)
+void get_random_bytes(void *buf, int nbytes)
 {
 	lrng_get_random_bytes(buf, nbytes);
 }
@@ -291,24 +281,26 @@ EXPORT_SYMBOL(wait_for_random_bytes);
  *
  * Return: number of bytes filled in.
  */
-size_t __must_check get_random_bytes_arch(void *buf, size_t nbytes)
+int __must_check get_random_bytes_arch(void *buf, int nbytes)
 {
-	size_t left = nbytes;
 	u8 *p = buf;
 
-	while (left) {
+	while (nbytes) {
 		unsigned long v;
-		size_t chunk = min_t(size_t, left, sizeof(unsigned long));
+		int chunk = min_t(int, nbytes, sizeof(unsigned long));
 
 		if (!arch_get_random_long(&v))
 			break;
 
 		memcpy(p, &v, chunk);
 		p += chunk;
-		left -= chunk;
+		nbytes -= chunk;
 	}
 
-	return nbytes - left;
+	if (nbytes)
+		lrng_get_random_bytes(p, nbytes);
+
+	return nbytes;
 }
 EXPORT_SYMBOL(get_random_bytes_arch);
 
--- a/drivers/char/lrng/lrng_interface_random_kernel.h
+++ b/drivers/char/lrng/lrng_interface_random_kernel.h
@@ -8,10 +8,10 @@
 
 #ifdef CONFIG_LRNG_RANDOM_IF
 void lrng_process_ready_list(void);
-bool lrng_ready_chain_has_sleeper(void);
+bool lrng_ready_list_has_sleeper(void);
 void invalidate_batched_entropy(void);
 #else /* CONFIG_LRNG_RANDOM_IF */
-static inline bool lrng_ready_chain_has_sleeper(void) { return false; }
+static inline bool lrng_ready_list_has_sleeper(void) { return false; }
 static inline void lrng_process_ready_list(void) { }
 static inline void invalidate_batched_entropy(void) { }
 #endif /* CONFIG_LRNG_RANDOM_IF */
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -251,7 +251,7 @@ static void lrng_drng_seed(struct lrng_d
 		 * directly from the entropy sources.
 		 */
 		if (!wq_has_sleeper(&lrng_init_wait) &&
-		    !lrng_ready_chain_has_sleeper())
+		    !lrng_ready_list_has_sleeper())
 			lrng_drng_atomic_seed_es();
 		else
 			lrng_init_ops(NULL);
