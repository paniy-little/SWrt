From 8a8150f045ed73e15c77c38be4b90999024f6d17 Mon Sep 17 00:00:00 2001
From: skbeh <60107333+skbeh@users.noreply.github.com>
Date: Sat, 16 Sep 2023 15:04:12 +0000
Subject: [PATCH] config: allow configuring max limit for preferred and valid
 lifetime

---
 src/config.c    | 32 ++++++++++++++++++++++++++++++++
 src/dhcpv6-ia.c |  9 +++++++++
 src/odhcpd.h    |  6 ++++++
 src/router.c    | 35 +++++++++++++++++++++++++++--------
 4 files changed, 74 insertions(+), 8 deletions(-)

--- a/src/config.c
+++ b/src/config.c
@@ -92,6 +92,8 @@ enum {
 	IFACE_ATTR_NDPROXY_SLAVE,
 	IFACE_ATTR_PREFIX_FILTER,
 	IFACE_ATTR_PREFERRED_LIFETIME,
+	IFACE_ATTR_MAX_PREFERRED_LIFETIME,
+	IFACE_ATTR_MAX_VALID_LIFETIME,
 	IFACE_ATTR_NTP,
 	IFACE_ATTR_MAX
 };
@@ -145,6 +147,8 @@ static const struct blobmsg_policy iface
 	[IFACE_ATTR_NDPROXY_SLAVE] = { .name = "ndproxy_slave", .type = BLOBMSG_TYPE_BOOL },
 	[IFACE_ATTR_PREFIX_FILTER] = { .name = "prefix_filter", .type = BLOBMSG_TYPE_STRING },
 	[IFACE_ATTR_PREFERRED_LIFETIME] = { .name = "preferred_lifetime", .type = BLOBMSG_TYPE_STRING },
+	[IFACE_ATTR_MAX_PREFERRED_LIFETIME] = { .name = "max_preferred_lifetime", .type = BLOBMSG_TYPE_STRING },
+	[IFACE_ATTR_MAX_VALID_LIFETIME] = { .name = "max_valid_lifetime", .type = BLOBMSG_TYPE_STRING },
 	[IFACE_ATTR_NTP] = { .name = "ntp", .type = BLOBMSG_TYPE_ARRAY },
 };
 
@@ -648,6 +652,34 @@ int config_parse_interface(void *data, s
 
 	}
 
+	if ((c = tb[IFACE_ATTR_MAX_PREFERRED_LIFETIME])) {
+		double time = parse_leasetime(c);
+
+		if (time >= 0) {
+			iface->max_preferred_lifetime = time;
+		} else {
+			iface->max_preferred_lifetime = ND_PREFERRED_LIMIT;
+			syslog(LOG_ERR, "Invalid %s value configured for interface '%s'",
+			       iface_attrs[IFACE_ATTR_MAX_PREFERRED_LIFETIME].name, iface->name);
+		}
+	} else {
+		iface->max_preferred_lifetime = ND_PREFERRED_LIMIT;
+	}
+
+	if ((c = tb[IFACE_ATTR_MAX_VALID_LIFETIME])) {
+		double time = parse_leasetime(c);
+
+		if (time >= 0) {
+			iface->max_valid_lifetime = time;
+		} else {
+			iface->max_valid_lifetime = ND_VALID_LIMIT;
+			syslog(LOG_ERR, "Invalid %s value configured for interface '%s'",
+			       iface_attrs[IFACE_ATTR_MAX_VALID_LIFETIME].name, iface->name);
+		}
+	} else {
+		iface->max_valid_lifetime = ND_VALID_LIMIT;
+	}
+
 	if ((c = tb[IFACE_ATTR_START])) {
 		iface->dhcpv4_start.s_addr = htonl(blobmsg_get_u32(c));
 		iface->dhcpv4_end.s_addr = htonl(ntohl(iface->dhcpv4_start.s_addr) +
--- a/src/dhcpv6-ia.c
+++ b/src/dhcpv6-ia.c
@@ -1027,6 +1027,15 @@ static size_t build_ia(uint8_t *buf, siz
 			}
 		}
 
+		if (pref) {
+			if (iface->max_preferred_lifetime)
+				pref = min(pref, iface->max_preferred_lifetime);
+		}
+		if (valid) {
+			if (iface->max_valid_lifetime)
+				valid = min(valid, iface->max_valid_lifetime);
+		}
+
 		if (!INFINITE_VALID(a->valid_until))
 			/* UINT32_MAX is considered as infinite leasetime */
 			a->valid_until = (valid == UINT32_MAX) ? 0 : valid + now;
--- a/src/odhcpd.h
+++ b/src/odhcpd.h
@@ -37,6 +37,10 @@
 // RFC 8781 defines PREF64 option
 #define ND_OPT_PREF64 38
 
+// RFC9096 defines recommended option lifetimes configuration values
+#define ND_PREFERRED_LIMIT 2700
+#define ND_VALID_LIMIT 5400
+
 #define INFINITE_VALID(x) ((x) == 0)
 
 #define _unused __attribute__((unused))
@@ -319,6 +323,8 @@ struct interface {
 	uint32_t ra_hoplimit;
 	int ra_mtu;
 	uint32_t preferred_lifetime;
+	uint32_t max_preferred_lifetime;
+	uint32_t max_valid_lifetime;
 
 	// DHCP
 	uint32_t dhcp_leasetime;
--- a/src/router.c
+++ b/src/router.c
@@ -452,7 +452,8 @@ static int send_router_advert(struct int
 	size_t dns_sz = 0, search_sz = 0, pref64_sz = 0;
 	size_t pfxs_cnt = 0, routes_cnt = 0;
 	ssize_t valid_addr_cnt = 0, invalid_addr_cnt = 0;
-	uint32_t minvalid = UINT32_MAX, maxival, lifetime;
+	uint32_t minvalid = UINT32_MAX, maxival, lifetime, max_prefix_vlt = ND_VALID_LIMIT;
+	uint32_t calculated_ra_lifetime;
 	int msecs, mtu = iface->ra_mtu, hlim = iface->ra_hoplimit;
 	bool default_route = false;
 	bool valid_prefix = false;
@@ -598,10 +599,22 @@ static int send_router_advert(struct int
 		if (addr->valid > (uint32_t)now) {
 			valid = TIME_LEFT(addr->valid, now);
 
+			if (valid < max_prefix_vlt)
+				max_prefix_vlt = valid;
+
 			if (iface->ra_useleasetime && valid > iface->dhcp_leasetime)
 				valid = iface->dhcp_leasetime;
 		}
 
+		if (preferred) {
+			if (iface->max_preferred_lifetime)
+				preferred = min(preferred, iface->max_preferred_lifetime);
+		}
+		if (valid) {
+			if (iface->max_valid_lifetime)
+				valid = min(valid, iface->max_valid_lifetime);
+		}
+
 		if (minvalid > valid)
 			minvalid = valid;
 
@@ -629,24 +642,30 @@ static int send_router_advert(struct int
 
 	/* Calculate periodic transmit */
 	msecs = calc_adv_interval(iface, minvalid, &maxival);
-	lifetime = calc_ra_lifetime(iface, maxival);
+	calculated_ra_lifetime = calc_ra_lifetime(iface, maxival);
+	lifetime = min(calculated_ra_lifetime, max_prefix_vlt);
 
 	if (!iface->have_link_local) {
 		syslog(LOG_NOTICE, "Skip sending a RA on %s as no link local address is available", iface->name);
 		goto out;
 	}
 
-	if (default_route && valid_prefix) {
-		adv.h.nd_ra_router_lifetime = htons(lifetime < UINT16_MAX ? lifetime : UINT16_MAX);
-	} else {
+	/* RFC9096: CE routers SHOULD set the "Router Lifetime" of Router Advertisement (RA) messages to ND_PREFERRED_LIMIT. */
+	adv.h.nd_ra_router_lifetime = ND_PREFERRED_LIMIT;
+	if (!(default_route && valid_prefix)) {
 		adv.h.nd_ra_router_lifetime = 0;
 
 		if (default_route) {
 			syslog(LOG_WARNING, "A default route is present but there is no public prefix "
-					    "on %s thus we don't announce a default route by overriding ra_lifetime!", iface->name);
+					    "on %s thus we don't announce a default route by setting ra_lifetime to zero!", iface->name);
 		} else {
-			syslog(LOG_WARNING, "No default route present, overriding ra_lifetime!");
+			syslog(LOG_WARNING, "No default route present, setting ra_lifetime to zero!");
 		}
+	} else if (iface->ra_lifetime >= 0) {
+		adv.h.nd_ra_router_lifetime = calculated_ra_lifetime;
+		if (calculated_ra_lifetime == 0)
+			syslog(LOG_WARNING, "A default route is present and there is public prefix "
+						"but ra_lifetime on iface was set to zero, setting ra_lifetime to zero!");
 	}
 
 	syslog(LOG_DEBUG, "Using a RA lifetime of %d seconds on %s", ntohs(adv.h.nd_ra_router_lifetime), iface->name);
@@ -710,7 +729,7 @@ static int send_router_advert(struct int
 
 	if (iface->pref64_length) {
 		/* RFC 8781 ยง 4.1 rounding up lifetime to multiply of 8 */
-		uint16_t pref64_lifetime = lifetime < (UINT16_MAX - 7) ? lifetime + 7 : UINT16_MAX;
+		uint16_t pref64_lifetime = lifetime < (UINT16_MAX - 7) ? lifetime + 7 : (UINT16_MAX - 7);
 		uint8_t prefix_length_code;
 		uint32_t mask_a1, mask_a2;
 
