From 62a8c0e6db9de52493842c982a723dd155ac7736 Mon Sep 17 00:00:00 2001
Date: Sat, 16 Sep 2023 15:04:12 +0000
Subject: [PATCH] odhcpd: RFC 9096 compliance

and allow configuring upper limit for preferred and valid lifetime.
---
 README          |  9 +++++----
 src/config.c    | 34 +++++++++++++++++++++++++++++++++-
 src/dhcpv6-ia.c |  9 +++++++++
 src/odhcpd.h    |  6 ++++++
 src/router.c    | 23 +++++++++++++++++------
 src/router.h    |  2 +-
 6 files changed, 71 insertions(+), 12 deletions(-)

diff --git a/README b/README
index 8f0e6a4..c899cd5 100644
--- a/README
+++ b/README
@@ -126,12 +126,13 @@ ra_slaac		bool	1			Announce slaac for a prefix
 ra_offlink		bool	0			Announce prefixes off-link
 ra_preference		string	medium			Route(r) preference
 			[medium|high|low]
-ra_maxinterval		integer	600			Maximum time allowed between
+ra_maxinterval		integer	900			Maximum time allowed between
 							sending unsolicited RA
-ra_mininterval		integer	200			Minimum time allowed between
+ra_mininterval		integer	300			Minimum time allowed between
 							sending unsolicited RA
-ra_lifetime		integer	1800			Value to be placed in Router
-							Lifetime field of RA
+ra_lifetime		integer	2700			Value to be placed in Router
+							Lifetime field of RA. Not recommended to be
+							more than 2700 (RFC9096).
 ra_useleasetime		bool	0			Use configured leasetime as
 							limit for the preferred and
 							valid lifetime of a prefix
diff --git a/src/config.c b/src/config.c
index e631814..d8ff6f7 100644
--- a/src/config.c
+++ b/src/config.c
@@ -92,6 +92,8 @@ enum {
 	IFACE_ATTR_NDPROXY_SLAVE,
 	IFACE_ATTR_PREFIX_FILTER,
 	IFACE_ATTR_PREFERRED_LIFETIME,
+	IFACE_ATTR_MAX_PREFERRED_LIFETIME,
+	IFACE_ATTR_MAX_VALID_LIFETIME,
 	IFACE_ATTR_NTP,
 	IFACE_ATTR_MAX
 };
@@ -145,6 +147,8 @@ static const struct blobmsg_policy iface_attrs[IFACE_ATTR_MAX] = {
 	[IFACE_ATTR_NDPROXY_SLAVE] = { .name = "ndproxy_slave", .type = BLOBMSG_TYPE_BOOL },
 	[IFACE_ATTR_PREFIX_FILTER] = { .name = "prefix_filter", .type = BLOBMSG_TYPE_STRING },
 	[IFACE_ATTR_PREFERRED_LIFETIME] = { .name = "preferred_lifetime", .type = BLOBMSG_TYPE_STRING },
+	[IFACE_ATTR_MAX_PREFERRED_LIFETIME] = { .name = "max_preferred_lifetime", .type = BLOBMSG_TYPE_STRING },
+	[IFACE_ATTR_MAX_VALID_LIFETIME] = { .name = "max_valid_lifetime", .type = BLOBMSG_TYPE_STRING },
 	[IFACE_ATTR_NTP] = { .name = "ntp", .type = BLOBMSG_TYPE_ARRAY },
 };
 
@@ -224,7 +228,7 @@ static void set_interface_defaults(struct interface *iface)
 	iface->dns_service = true;
 	iface->ra_flags = ND_RA_FLAG_OTHER;
 	iface->ra_slaac = true;
-	iface->ra_maxinterval = 600;
+	iface->ra_maxinterval = 900;
 	iface->ra_mininterval = iface->ra_maxinterval/3;
 	iface->ra_lifetime = -1;
 	iface->ra_dns = true;
@@ -648,6 +652,34 @@ int config_parse_interface(void *data, size_t len, const char *name, bool overwr
 
 	}
 
+	if ((c = tb[IFACE_ATTR_MAX_PREFERRED_LIFETIME])) {
+		double time = parse_leasetime(c);
+
+		if (time >= 0) {
+			iface->max_preferred_lifetime = time;
+		} else {
+			iface->max_preferred_lifetime = ND_PREFERRED_LIMIT;
+			syslog(LOG_ERR, "Invalid %s value configured for interface '%s'",
+			       iface_attrs[IFACE_ATTR_MAX_PREFERRED_LIFETIME].name, iface->name);
+		}
+	} else {
+		iface->max_preferred_lifetime = ND_PREFERRED_LIMIT;
+	}
+
+	if ((c = tb[IFACE_ATTR_MAX_VALID_LIFETIME])) {
+		double time = parse_leasetime(c);
+
+		if (time >= 0) {
+			iface->max_valid_lifetime = time;
+		} else {
+			iface->max_valid_lifetime = ND_VALID_LIMIT;
+			syslog(LOG_ERR, "Invalid %s value configured for interface '%s'",
+			       iface_attrs[IFACE_ATTR_MAX_VALID_LIFETIME].name, iface->name);
+		}
+	} else {
+		iface->max_valid_lifetime = ND_VALID_LIMIT;
+	}
+
 	if ((c = tb[IFACE_ATTR_START])) {
 		iface->dhcpv4_start.s_addr = htonl(blobmsg_get_u32(c));
 		iface->dhcpv4_end.s_addr = htonl(ntohl(iface->dhcpv4_start.s_addr) +
diff --git a/src/dhcpv6-ia.c b/src/dhcpv6-ia.c
index 41c9f30..b413ab4 100644
--- a/src/dhcpv6-ia.c
+++ b/src/dhcpv6-ia.c
@@ -1027,6 +1027,15 @@ static size_t build_ia(uint8_t *buf, size_t buflen, uint16_t status,
 			}
 		}
 
+		if (pref) {
+			if (iface->max_preferred_lifetime)
+				pref = min(pref, iface->max_preferred_lifetime);
+		}
+		if (valid) {
+			if (iface->max_valid_lifetime)
+				valid = min(valid, iface->max_valid_lifetime);
+		}
+
 		if (!INFINITE_VALID(a->valid_until))
 			/* UINT32_MAX is considered as infinite leasetime */
 			a->valid_until = (valid == UINT32_MAX) ? 0 : valid + now;
diff --git a/src/odhcpd.h b/src/odhcpd.h
index 08b4920..58ab155 100644
--- a/src/odhcpd.h
+++ b/src/odhcpd.h
@@ -37,6 +37,10 @@
 // RFC 8781 defines PREF64 option
 #define ND_OPT_PREF64 38
 
+// RFC9096 defines recommended option lifetimes configuration values
+#define ND_PREFERRED_LIMIT 2700
+#define ND_VALID_LIMIT 5400
+
 #define INFINITE_VALID(x) ((x) == 0)
 
 #define _unused __attribute__((unused))
@@ -319,6 +323,8 @@ struct interface {
 	uint32_t ra_hoplimit;
 	int ra_mtu;
 	uint32_t preferred_lifetime;
+	uint32_t max_preferred_lifetime;
+	uint32_t max_valid_lifetime;
 
 	// DHCP
 	uint32_t dhcp_leasetime;
diff --git a/src/router.c b/src/router.c
index d5ef7f8..b4d52aa 100644
--- a/src/router.c
+++ b/src/router.c
@@ -371,7 +371,7 @@ static int calc_adv_interval(struct interface *iface, uint32_t minvalid,
 
 static uint32_t calc_ra_lifetime(struct interface *iface, uint32_t maxival)
 {
-	uint32_t lifetime = 3*maxival;
+	uint32_t lifetime = maxival * 3;
 
 	if (iface->ra_lifetime >= 0) {
 		lifetime = iface->ra_lifetime;
@@ -452,7 +452,7 @@ static int send_router_advert(struct interface *iface, const struct in6_addr *fr
 	size_t dns_sz = 0, search_sz = 0, pref64_sz = 0;
 	size_t pfxs_cnt = 0, routes_cnt = 0;
 	ssize_t valid_addr_cnt = 0, invalid_addr_cnt = 0;
-	uint32_t minvalid = UINT32_MAX, maxival, lifetime;
+	uint32_t minvalid = ND_VALID_LIMIT, maxival, lifetime;
 	int msecs, mtu = iface->ra_mtu, hlim = iface->ra_hoplimit;
 	bool default_route = false;
 	bool valid_prefix = false;
@@ -602,6 +602,17 @@ static int send_router_advert(struct interface *iface, const struct in6_addr *fr
 				valid = iface->dhcp_leasetime;
 		}
 
+		if (preferred) {
+			if (iface->max_preferred_lifetime) {
+				preferred = min(preferred, iface->max_preferred_lifetime);
+			}
+		}
+		if (valid) {
+			if (iface->max_valid_lifetime) {
+				valid = min(valid, iface->max_valid_lifetime);
+			}
+		}
+
 		if (minvalid > valid)
 			minvalid = valid;
 
@@ -637,15 +648,15 @@ static int send_router_advert(struct interface *iface, const struct in6_addr *fr
 	}
 
 	if (default_route && valid_prefix) {
-		adv.h.nd_ra_router_lifetime = htons(lifetime < UINT16_MAX ? lifetime : UINT16_MAX);
+		adv.h.nd_ra_router_lifetime = htons(lifetime);
 	} else {
 		adv.h.nd_ra_router_lifetime = 0;
 
 		if (default_route) {
 			syslog(LOG_WARNING, "A default route is present but there is no public prefix "
-					    "on %s thus we don't announce a default route by overriding ra_lifetime!", iface->name);
+					    "on %s thus we don't announce a default route by setting ra_lifetime to zero!", iface->name);
 		} else {
-			syslog(LOG_WARNING, "No default route present, overriding ra_lifetime!");
+			syslog(LOG_WARNING, "No default route present, setting ra_lifetime to zero!");
 		}
 	}
 
@@ -710,7 +721,7 @@ static int send_router_advert(struct interface *iface, const struct in6_addr *fr
 
 	if (iface->pref64_length) {
 		/* RFC 8781 ยง 4.1 rounding up lifetime to multiply of 8 */
-		uint16_t pref64_lifetime = lifetime < (UINT16_MAX - 7) ? lifetime + 7 : UINT16_MAX;
+		uint16_t pref64_lifetime = lifetime < (UINT16_MAX - 7) ? lifetime + 7 : (UINT16_MAX - 7);
 		uint8_t prefix_length_code;
 		uint32_t mask_a1, mask_a2;
 
diff --git a/src/router.h b/src/router.h
index 0444da8..a994892 100644
--- a/src/router.h
+++ b/src/router.h
@@ -32,7 +32,7 @@ struct icmpv6_opt {
 
 #define MaxInitialRtrAdvInterval	16
 #define MaxInitialRtAdvs		3
-#define MaxRtrAdvInterval		1800
+#define MaxRtrAdvInterval		2700
 #define MinRtrAdvInterval		3
 
 #define ND_RA_FLAG_PROXY		0x4
-- 
2.42.0
