name: X86-OpenWrt-Current

on:
  workflow_dispatch:
  schedule:
    - cron: 0 10 * * *

jobs:
  build:
    runs-on: ubuntu-22.04
    #if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        ulimit -a
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 2048
        root-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
    - name: Checkout
      uses: actions/checkout@main
    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff -a
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install aria2
        sudo -E wget -P /usr/local/sbin/ https://github.com/HiGarfield/lede-17.01.4-Mod/raw/master/.github/backup/apt-fast
        sudo -E chmod -R 755 /usr/local/sbin/apt-fast
        sudo -E apt-fast -y -qq install dwarves llvm clang lldb lld build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget ccache curl swig coreutils vim nano python3 python3-pip python3-ply haveged lrzsz scons libpython3-dev
        sudo -E pip3 install pyelftools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
    - name: Prepare Mixedwrt
      run: |
        sudo chown -R runner:runner /home/runner/work/SWrt
        cp -r ./SCRIPTS/X86/. ./SCRIPTS/
        cp -r ./SCRIPTS/. ./
        /bin/bash 01_get_ready.sh
    - name: Prepare Package
      run: |
        cd openwrt
        cp -r ../SCRIPTS/. ./
        cp -r ../SELF/. ./
        cp -r ../SELF/X86/. ./
        /bin/bash 02_prepare_package_self.sh
        /bin/bash 02_target_only_self.sh
        /bin/bash 04_remove_upx.sh
    - name: QTMDFW4
      run: |
        cd openwrt
        cp -rf ../SELF/X86/config_self.seed .config
        /bin/bash 07_fw3.sh
    - name: Convert Translation
      run: |
        cd openwrt
        /bin/bash 03_convert_translation.sh
    - name: Add ACL
      run: |
        cd openwrt
        /bin/bash 05_create_acl_for_luci.sh -a
    - name: Make Config
      run: |
        cd openwrt
        make defconfig
    - name: Get Architecture
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | awk -F '_' '{print $1}')"
        echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}" >>$GITHUB_ENV
        latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+\-*r*c*[0-9]*.tar.gz" | sed -n '/[2-9][0-9]/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')"
        echo "latest_release=${latest_release}" >>$GITHUB_ENV
        latest_time="$(date +%Y-%m-%d)"
        echo "latest_time=${latest_time}" >>$GITHUB_ENV
    - name: Cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        mixkey: ${{ env.TARGET_DEVICE_ARCH }}
        prefix: ${{ github.workspace }}/openwrt
    - name: Make Download
      run: |
        cd openwrt
        make download -j50
    - name: Compile Openwrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        cd openwrt
        #echo | make kernel_oldconfig -j$(($(nproc) + 1)) 
        IGNORE_ERRORS=1 make -j$(($(nproc) + 1))
        echo $?
    - name: If Error
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
        cat openwrt/.config
        echo '================================================================'
        cd openwrt && make -j1 V=s
    - name: Print Disk Space After
      run: df -h
    - name: Organize files
      id: organize
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        mv openwrt/bin/targets/x86/64/*combined-efi.img* ./artifact/
        mv openwrt/bin/targets/x86/64/*combined-efi.vhdx* ./artifact/
        mv openwrt/bin/targets/x86/64/*generic-rootfs.tar.gz* ./artifact/
        cd ./artifact/
        ls -Ahl
        #gzip -d *.gz && exit 0
        gzip --best *.img
        gzip --best *.vhdx
        ls -Ahl
        sha256sum openwrt*x86* | tee X86-${{ env.latest_time }}-${{ env.latest_release }}.sha256sum
        zip X86-${{ env.latest_release }}-ext4.zip *x86-64-generic*
        #zip X86-${{ env.latest_time }}-${{ env.latest_release }}-ext4.zip *x86-64-generic*
        #zip X86-${{ env.latest_time }}-${{ env.latest_release }}-sfs.zip *squashfs-combined*
        ls -Ahl
    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        name: OpenWRT_${{ env.latest_release }}
        path: ./artifact/

    - name: Create release
      id: create_release
      uses: ncipollo/release-action@main
      with:
        name: OpenWRT-${{ env.latest_release }}
        allowUpdates: true
        prerelease: false
        tag: X86-${{ env.latest_release }}
        commit: 22.03
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ./artifact/*.zip
        updateOnlyUnreleased: false
